import { getParent } from 'diagram-js/lib/util/ModelUtil';

import { is as modelUtilIs, isAny as modelUtilIsAny } from '../../../util/ModelUtil';

/**
 * Return first moddle element matching specified type.
 *
 * @param {djs.model.Base|ModdleElement} element
 * @param {string} type
 *
 * @return {boolean}
 */
export function is(element, type) {
  return modelUtilIs(element, type);
}

/**
 * Reexport isAny function from ModelUtil for compatibility
 */
export function isAny(element, types) {
  if (!element) {
    return false;
  }

  if (!Array.isArray(types)) {
    types = [ types ];
  }

  return types.some(function(type) {
    return is(element, type);
  });
}

/**
 * Returns whether a connection has a given type.
 *
 * @param  {djs.model.Base} connection
 * @param  {String} type
 *
 * @return {Boolean}
 */
export function isConnectionType(connection, type) {
  return getBusinessObject(connection).$type === type;
}

/**
 * Get the parent for a given element.
 *
 * @param {djs.model.Base|ModdleElement} element
 * @param {string} [anyType]
 *
 * @return {djs.model.Base|ModdleElement|null}
 */
export function getParent(element, anyType) {
  if (!element) {
    return null;
  }

  var parent = getParent(element);

  if (!anyType) {
    return parent;
  }

  while (parent && !is(parent, anyType)) {
    parent = getParent(parent);
  }

  return null;
}

/**
 * Returns whether a connection has a given type.
 *
 * @param  {djs.model.Base} connection
 * @param  {String} type
 *
 * @return {Boolean}
 */
export function isDirectionHorizontal(direction) {
  return direction === 'left' || direction === 'right';
}

/**
 * Returns true if the given element is a label.
 *
 * @param {djs.model.Base} element
 * @return {boolean}
 */
export function isLabel(element) {
  return element && element.type === 'label';
}

/**
 * Check if an element has an external label.
 *
 * @param {djs.model.Base} element
 * @return {boolean}
 */
export function hasExternalLabel(element) {
  return isAny(element, [
    'bpmn:Event', 
    'bpmn:Gateway', 
    'bpmn:DataStoreReference', 
    'bpmn:DataObjectReference', 
    'bpmn:SequenceFlow', 
    'bpmn:MessageFlow', 
    'bpmn:DataAssociation'
  ]);
}
